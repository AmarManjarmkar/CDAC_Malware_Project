import pefile
import hashlib
import pandas as pd

Attributes = ['e_magic',
 'e_cblp',
 'e_cp',
 'e_crlc',
 'e_cparhdr',
 'e_minalloc',
 'e_maxalloc',
 'e_ss',
 'e_sp',
 'e_csum',
 'e_ip',
 'e_cs',
 'e_lfarlc',
 'e_ovno',
 'e_oemid',
 'e_oeminfo',
 'e_lfanew',
 'Machine',
 'NumberOfSections',
 'PointerToSymbolTable',
 'NumberOfSymbols',
 'SizeOfOptionalHeader',
 'Characteristics',
 'Magic',
 'MajorLinkerVersion',
 'MinorLinkerVersion',
 'SizeOfCode',
 'SizeOfInitializedData',
 'SizeOfUninitializedData',
 'AddressOfEntryPoint',
 'BaseOfCode',
 'ImageBase',
 'SectionAlignment',
 'FileAlignment',
 'MajorOperatingSystemVersion',
 'MinorOperatingSystemVersion',
 'MajorImageVersion',
 'MinorImageVersion',
 'MajorSubsystemVersion',
 'MinorSubsystemVersion',
 'Reserved1',
 'SizeOfImage',
 'SizeOfHeaders',
 'CheckSum',
 'Subsystem',
 'DllCharacteristics',
 'SizeOfStackReserve',
 'SizeOfHeapReserve',
 'SizeOfHeapCommit',
 'LoaderFlags',
 'NumberOfRvaAndSizes']


def GetHeader(pe):
    # path = "/media/amar/AAB0883AB0880ECF/Users/Amar/Downloads/Firefox Installer.exe"
    # pe = pefile.PE(pe)
    Header = {}
    OH = pe.OPTIONAL_HEADER
    DH = pe.DOS_HEADER
    FH = pe.FILE_HEADER
    
    #Extracting DOS Header
    for key in dir(DH):
        if key in Attributes:
            Header[key] = getattr(DH,key)

    #Extracting File Header
    for key in dir(FH):
        if key in Attributes:
            Header[key] = getattr(FH,key)

    #Extracting optional header
    for key in dir(OH):
        if key in Attributes:
            Header[key] = getattr(OH,key)
    return Header

def CreateDataframe(dictionary):
    
    Sample = {}

    #Generating SHA256 hashcode 
    # sha = hashlib.sha256(open(path,"rb").read()).hexdigest()
    # sha = hashlib.sha256(file_content).hexdigest()

    # Sample['SHA256'] = sha

    for attribute in Attributes:
        if attribute in dictionary:
            Sample[attribute] = [dictionary[attribute]]

    return pd.DataFrame(Sample)
    
